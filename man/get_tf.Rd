% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/matrices.R
\name{get_tf}
\alias{get_tf}
\title{TermFrequency scaling matrix construction from DocumentTermMatrix}
\usage{
get_tf(m, type = c("tf", "boolean"))
}
\arguments{
\item{m}{\link{simple_triplet_matrix} - DocumentTermMatrix.}

\item{type}{type of scaling. Formula for tf :
\deqn{tf = \fraq {# word appears in document}{# words in document}}{%
tf = (# word appears in document) / (# words in document) }
\deqn{tf = {Does word appears in document (boolean encoding): 0 if not appears, 1 if appears}}{%
tf = (Does word appears in document (boolean encoding): 0 if not appears, 1 if appears)}}
}
\description{
Creates TermFrequency (idf) scaling matrix from DocumentTermMatrix
}
\examples{
# create DocumentTermMatrix from two simple texts
textList <- preprocess_corpus(corpus = c("first text", "Second text. It is much much longer!:-)"))
DTM <- get_dtm(textList)
TFScalingMatrix <- get_tf(DTM, type = 'tf')
# Let's calculate TermFrequency scaled matrix:
TFTransformed <- TFScalingMatrix \%*\% m
# or TermFrequency-InverseDocumentFrequency scaled matrix.
TFIDFTransformed <- TFScalingMatrix \%*\% m \%*\% get_idf(DTM)
# The same result we can obtain using transform_dtm function with parameter type = 'tfidf'
TFIDFTransformed_2 <- transform_dtm(DTM, type='tfidf')
identical(TFIDFTransformed_2, TFIDFTransformed)
}

